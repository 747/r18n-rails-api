!!! Strict
%html{ html_attrs }
  %head
    %meta( http-equiv='Content-Type' content='text/html; charset=UTF-8' )
    %meta( http-equiv='Content-Language' content='en' )
    %title R18n – Ruby i18n for Merb, Sinatra and desktop
    %link( rel='stylesheet' type='text/css' href='style.css' )
    %script( type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js' )
    %script( type='text/javascript' src='action.js' )
    %link( rel='meta' type='application/rdf+xml' title='DOAP' href='doap.rdf' )
    %link( rel='shortcut icon' href='favicon.ico' type='image/x-icon' )
    %meta( name='Keywords' content='R18n, i18n, l10n, ruby, merb, sinatra, desktop, jruby, internationalize, localize, translate, internationalization, localization, translation, languages, gem' )
    %meta( name='Description' content='R18n – internationalize and localize your Merb/Sinatra/desktop Ruby application' )
  %body
    %h1 R18n
    %p Tool to internationalize and localize your Merb/Sinatra/desktop Ruby application.
    %p R18n was developed by <a href="http://sitnik.ru/">Andrey “A.I.” Sitnik</a> and was licensed under <a href="http://www.gnu.org/licenses/lgpl.html">GNU LGPL 3</a>.
    %h2 Features
    %ul
      %li
        R18n isn’t a only <a href="http://www.rubyonrails.org/">Rails</a> plugin.
        It is a core gem with plugins for Merb framework, Sinatra and desktop applications.
      %li
        It has special support for countries with two official languages (<a href="http://en.wikipedia.org/wiki/Commonwealth_of_Independent_States">exUSSR</a>, <a href="http://en.wikipedia.org/wiki/Chinese_written_language#Simplified_and_traditional_Chinese">China</a>).
        If there isn’t translation in user locale, it will be found in locales, which user may know (not only in default locale).
        For example, many people in <a href="http://en.wikipedia.org/wiki/Belarus">Belarus</a> can understand <a href="http://en.wikipedia.org/wiki/Russian_language">Russian</a>, and locale has information about it.
      %li
        It can format numbers and time to the rules of the user locale, translate month and week days name and give other locale information.
      %li
        It storage translation in <a href="http://en.wikipedia.org/wiki/YAML">YAML</a> format.
        You can put procedures and <a href="http://en.wikipedia.org/wiki/Pluralization">pluralization</a> (“1 comment”, “5 comments”) in your translation.
      %li
        It has translation for commons words, like “OK”, “Cancel”, etc.
    #position
      %ul
        %li.merb
          %a( href='#merb' ) Merb
        %li.sinatra
          %a( href='#sinatra' ) Sinatra
        %li.desktop
          %a( href='#desktop' ) Desktop
      %h2 How To
      .slider.merb
        %h3 Merb
        %p See also <a href="http://github.com/teamon/merb-i18n/tree/master">teamon’s merb-i18n</a>.
        %ol
          %li
            Install merb_r18n gem:
            %pre
              <span class="sudo">sudo </span>gem install merb_r18n
          %li
            Add merb_r18n to your merb application in <tt>config/dependencies.rb</tt>:
            :rubysyntax
              dependency 'merb_r18n'
          %li
            Add route to set locale manually in your <tt>config/router.rb</tt>. For example set available translations:
            :rubysyntax
              Merb::Router.prepare do
                match('(/:locale)', :locale => /(en|ru)/) do
                  # Your application routers.
                  default_route
                end
              end
          %li
            Create translations file in <tt>app/i18n/</tt>. For example <tt>app/i18n/en.yml</tt>:
            :yamlsyntax
              post:
                add: Add post
                edit: Edit %1

              comments: !!pl
                0: No comments
                1: One comment
                n: %1 comments
          %li
            Use translation messages in view. For example:
            :xmlsyntax
              <%= link_to i18n.post.add, 'posts/add' %>
              <%= link_to i18n.post.edit(post.title), "posts/edit/\#{@post.id}" %>
              <%= link_to i18n.delete, "posts/delete/\#{@post.id}" %>
              
              <h1><%= i18n.comments(@post.comments.size) %></h1>
          %li
            Print localized time and numbers. For example:
            :xmlsyntax
              <%= i18n.l @post.created_at, :date %>
          %li
            Print available translations: 
            :xmlsyntax
              <ul>
                <% i18n.translations.each_pair do |locale, title| %>
                <li><a href="/<%= locale %>/"><%= title %></a></li>
                <% end %>
              </ul>
            See about Merb Slises in <tt>merb_r18n</tt> gem documentation.
      .slider.sinatra
        %h3 Sinatra
        %ol
          %li
            Install sinatra-r18n gem:
            %pre
              <span class="sudo">sudo </span>gem install sinatra-r18n
          %li
            Create translations dir <tt>./i18n/</tt>.
          %li
            Add file with translation. For example <tt>./i18n/en.yml</tt>:
            :yamlsyntax
              post:
                friends: Post only for friends
                tags: Post tags: %1
              
              comments: !!pl
                0: No comments
                1: One comment
                n: %1 comments
          %li
            Add R18n to your Sinatra application:
            :rubysyntax
              require 'sinatra/r18n'
          %li
            Add locale to your URLs. For example:
            :rubysyntax
              get '/:locale/posts/:id' do
                @post = Post.find(params[:id])
                haml :post
              end
            Or you save locale in session, when user change it:
            :rubysyntax
              before do
                session[:locale] = params[:locale] if params[:locale]
              end
          %li
            Use translation messages in view. For example in HAML:
            :rubysyntax
              %p= i18n.post.friends
              %p= i18n.post.tags(@post.tags.join(', '))
              
              %h2= i18n.comments(@post.comments.size)
          %li
            Print localized time and numbers. For example:
            :rubysyntax
              i18n.l @post.created_at, :date
          %li
            Print available translations. For example in HAML:
            :rubysyntax
              %ul
              - i18n.translations.each_pair do |locale, title|
                %li
                  %a( href="/\#{locale}/" )= title
      .slider.desktop
        %h3 Desktop
        %ol
          %li
            Install r18n-desktop gem:
            %pre
              <span class="sudo">sudo </span>gem install r18n-desktop
          %li
            Create translations dir. For example: <tt>./i18n/</tt>.
          %li
            Add file with translation in some language. For example <tt>./i18n/en.yml</tt>:
            :yamlsyntax
              file:
                add: Add file
                delete: Delete file %1

              files: !!pl
                0: No files
                1: One file
                n: %1 files

              author: !!proc |name| "This file was created by \#{name.capitalize}"
          %li
            Add R18n to your application:
            :rubysyntax
              require 'r18n-desktop'
          %li
            Load I18n object:
            :rubysyntax
              i18n = R18n.from_env 'translations/'
            Or, if user can optional set locale manually:
            :rubysyntax
              i18n = R18n.from_env 'translations/', manual_locale
          %li
            Use translation messages to user. For example:
            :rubysyntax
              i18n.file.add             #=> "Add file"
              i18n.file.delete('Test')  #=> "Delete file Test"
              i18n.files(1)             #=> "One file"
              i18n.files(12)            #=> "12 files"
              i18n.author('user')       #=> "This file was created by User"

              i18n.l -12000.5           #=> "−12,000.5"

              i18n.l Time.now           #=> "Sun Sep 21 19:50:04 GMT 2008"
              i18n.l Time.now, :date    #=> "09/21/2008"
              i18n.l Time.now, '%B'     #=> "September"

              # Base translation
              i18n.ok                   #=> "OK"
              i18n.cancel               #=> "Cancel"
      %h2 Sources
      %p It is a <a href="http://en.wikipedia.org/wiki/Free_software">free software</a> and you can get and edit sources:
      %p View <a href="http://github.com/ai/r18n">online</a> on GitHub or clone <a href="http://en.wikipedia.org/wiki/Git_(software)">Git</a> repository:
      %pre
        git clone git://github.com/ai/r18n.git
