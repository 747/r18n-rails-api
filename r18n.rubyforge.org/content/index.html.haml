!!! Strict
%html{ html_attrs }
  %head
    %meta( http-equiv='Content-Type' content='text/html; charset=UTF-8' )
    %meta( http-equiv='Content-Language' content='en' )
    %title R18n – Ruby i18n for Merb, Sinatra and desktop
    %link( rel='stylesheet' type='text/css' href='style.css' )
    %script( type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js' )
    %script( type='text/javascript' src='action.js' )
    %link( rel='meta' type='application/rdf+xml' title='DOAP' href='doap.rdf' )
    %link( rel='shortcut icon' href='favicon.ico' type='image/x-icon' )
    %meta( name='Keywords' content='R18n, i18n, l10n, ruby, merb, sinatra, desktop, jruby, internationalize, localize, translate, internationalization, localization, translation, languages, gem' )
    %meta( name='Description' content='R18n – internationalize and localize your Merb/Sinatra/desktop Ruby application' )
  %body
    %h1 R18n
    %p Tool to internationalize and localize your Merb/Sinatra/desktop Ruby application.
    %p R18n was developed by <a href="http://sitnik.ru/">Andrey “A.I.” Sitnik</a> and was licensed under <a href="http://www.gnu.org/licenses/lgpl.html">GNU LGPL 3</a>.
    %h2 Features
    %h3 Ruby-style syntax
    %p R18n uses hierarchical not English-centrist YAML format for translations by default:
    :yamlsyntax
      user:
      edit: Edit user
      name: User name is %1
      count: !!pl
        1: There is 1 user
        n: There are %1 users
    %p To access translation you can call methods with same names:
    :rubysyntax
      i18n.user.edit         #=> "Edit user"
      i18n.user.name('John') #=> "User name is John"
      i18n.user.count(5)     #=> "There are 5 users"
    %p If translation key has name of Object method you can use another way:
    :rubysyntax
      i18n[:methods] #=> "Methods"
    %h3 Filters
    %p You can add custom filters for some YAML type or any translated strings. Filters are cascade and can communicate with each other.
    %p R18n already has filters for HTML escaping, lambdas, Textile and Markdown:
    :yamlsyntax
      hi: !!markdown
        **Hi**, people!
      greater: !!escape
        1 < 2 is true
    :rubysyntax
      i18n.hi      #=> "<p><strong>Hi</strong>, people!</p>"
      i18n.greater #=> "1 &lt; 2 is true"
    %h3 Flexibility
    %p Translation variables and pluralization (“1 comment”, “5 comments”) are filters too. So you can extend or replace it. For example, you can use named variables filter from <code>r18n-rails-api</code> gem:
    :yamlsyntax
      greeting: "Hi, {{name}}"
    :rubysyntax
      R18n::Filters.on(:named_variables)
      i18n.greeting(name: 'John') #=> "Hi, John"
    %h3 Flexible locales
    %p Locale together with YAML description can extend Locale class, so locales are very flexible. For example, Russian locale has built-in different pluralization without any lambdas in YAML:
    :rubysyntax
      i18n.user.count(1) #=> "1 пользователь"
      i18n.user.count(2) #=> "2 пользователя"
      i18n.user.count(5) #=> "5 пользователей"
    %p Or English locale extend time formatters:
    :rubysyntax
      i18n.l Date.now, :full #=> "30th of November, 2009"
    %h3 Loaders
    %p R18n can load translations from any places, not just from YAML files. You just need to create loader object with 2 methods: +available+ and +load+:
    :rubysyntax
      class DBLoader
        def available
          Translation.find(:all).map(&:locale)
        end
        def load(locale)
          Translation.find(locale).to_hash
        end
      end
      
      i18n = R18n::I18n.new(user_locales, DBLoader.new)
    %p You can also set a list of different translation places or set extension places, which will be used only with application translation (useful for plugins).
    %h3 Object translation
    %p You can translate any class, including ORM models:
    :rubysyntax
      require 'r18n-core/translated'
      
      class Product < ActiveRecord::Base
        include R18n::Translated
        # Model has two usual property: title_en and title_ru
        translations :title
      end
      
      # For English user
      product.title #=> "Anthrax"
      
      # For Russian user
      product.title #=> "Сибирская язва"
    %h3 Localization
    %p R18n can localize numbers and time:
    :rubysyntax
      i18n.l -5000                 #=> "−5,000"
      i18n.l Time.now              #=> "30/11/2009 14:36"
      i18n.l Time.now, :full       #=> "30th of November, 2009 14:37"
      i18n.l Time.now - 60, :human #=> "1 minute ago"
    %h3 Several user languages support
    %p Lack of translation in user language isn’t exception for R18n (because translation to not primary language done by enthusiasts, it can be out of date). R18n just automatically take next user language (browser send a list of locales) and for cultures with two officially languages (e.g., exUSSR) it take second language (e.g., if translation isn’t available in Kazakh R18n will see in Russian):
    :rubysyntax
      i18n = R18n::I18n.new(['kk', 'de'], 'dir/with/translations')
      
      i18n.locales    #=> [Locale kk (Қазақша), Locale de (Deutsch),
                      #    Locale ru (Русский), Locale en (English)]
      
      i18n.kazakh  #=> "Қазақша", main user language
      i18n.deutsch #=> "Deutsch", not in Kazakh, use next user locale
      i18n.russian #=> "Русский", not in kk and de, use Kazakh sublocale
      i18n.english #=> "English", not in any user locales, use default
    %h3 Agnostic
    %p R18n has a agnostic core package and plugins with out-of-box support for Sinatra, Merb and desktop applications.
    #position
      %ul
        %li.merb
          %a( href='#merb' ) Merb
        %li.sinatra
          %a( href='#sinatra' ) Sinatra
        %li.desktop
          %a( href='#desktop' ) Desktop
      %h2 How To
      .slider.merb
        %h3 Merb
        %ol
          %li
            Install <a href="http://teamon.eu/">teamon’s</a> <a href="http://github.com/teamon/merb-i18n">merb_i18n</a> gem:
            %pre
              gem sources -a http://gemcutter.org
              <span class="sudo">sudo </span>gem install merb-i18n
          %li
            Add merb_i18n to your merb application in <tt>config/dependencies.rb</tt>:
            :rubysyntax
              dependency "merb-i18n"
          %li
            Add route to set locale manually in your <tt>config/router.rb</tt>. For example set available translations:
            :rubysyntax
              Merb::Router.prepare do
                match('(/:locale)', :locale => /(en|ru)/) do
                  # Your application routers.
                  default_route
                end
              end
          %li
            Create translations dir:
            %pre
              rake merb_i18n:install
          %li
            Create translations file in <tt>app/i18n/</tt>. For example <tt>app/i18n/en.yml</tt>:
            :yamlsyntax
              post:
                index:
                  add: Add post
                  edit: Edit %1

              comments: !!pl
                0: No comments
                1: One comment
                n: %1 comments
          %li
            Use translation messages in view. For example <tt>app/views/post/index.html.erb</tt>:
            :xmlsyntax
              <%= link_to ni18n.post.add, 'posts/add' %>
              <%= link_to ni18n.post.edit(post.title), "posts/edit/\#{@post.id}" %>
              <%= link_to ni18n.delete, "posts/delete/\#{@post.id}" %>
              
              <h1><%= i18n.comments(@post.comments.size) %></h1>
          %li
            Print localized time and numbers. For example:
            :xmlsyntax
              <%= i18n.l @post.created_at, :human %>
          %li
            Print available translations: 
            :xmlsyntax
              <ul>
                <% i18n.translations.each_pair do |locale, title| %>
                <li><a href="/<%= locale %>/"><%= title %></a></li>
                <% end %>
              </ul>
      .slider.sinatra
        %h3 Sinatra
        %ol
          %li
            Install sinatra-r18n gem:
            %pre
              <span class="sudo">sudo </span>gem install sinatra-r18n
          %li
            Create translations dir <tt>./i18n/</tt>.
          %li
            Add file with translation. For example <tt>./i18n/en.yml</tt>:
            :yamlsyntax
              post:
                friends: Post only for friends
                tags: Post tags: %1
              
              comments: !!pl
                0: No comments
                1: One comment
                n: %1 comments
          %li
            Add R18n to your Sinatra application:
            :rubysyntax
              require 'sinatra/r18n'
            If your application inherits from <tt>Sinatra::Base</tt> also add:
            :rubysyntax
              class YourApp < Sinatra::Base
                register Sinatra::R18n
                set :root, File.dirname(__FILE__)
          %li
            Add locale to your URLs. For example:
            :rubysyntax
              get '/:locale/posts/:id' do
                @post = Post.find(params[:id])
                haml :post
              end
            Or you save locale in session, when user change it:
            :rubysyntax
              before do
                session[:locale] = params[:locale] if params[:locale]
              end
          %li
            Use translation messages in view. For example in HAML:
            :rubysyntax
              %p= i18n.post.friends
              %p= i18n.post.tags(@post.tags.join(', '))
              
              %h2= i18n.comments(@post.comments.size)
          %li
            Print localized time and numbers. For example:
            :rubysyntax
              i18n.l @post.created_at, :human
          %li
            Print available translations. For example in HAML:
            :rubysyntax
              %ul
              - i18n.translations.each_pair do |locale, title|
                %li
                  %a( href="/\#{locale}/" )= title
      .slider.desktop
        %h3 Desktop
        %ol
          %li
            Install r18n-desktop gem:
            %pre
              <span class="sudo">sudo </span>gem install r18n-desktop
          %li
            Create translations dir. For example: <tt>./i18n/</tt>.
          %li
            Add file with translation in some language. For example <tt>./i18n/en.yml</tt>:
            :yamlsyntax
              file:
                add: Add file
                delete: Delete file %1

              files: !!pl
                0: No files
                1: One file
                n: %1 files

              author: !!proc |name| "This file was created by \#{name.capitalize}"
          %li
            Add R18n to your application:
            :rubysyntax
              require 'r18n-desktop'
          %li
            Load I18n object:
            :rubysyntax
              i18n = R18n.from_env 'translations/'
            Or, if user can optional set locale manually:
            :rubysyntax
              i18n = R18n.from_env 'translations/', manual_locale
          %li
            Use translation messages to user. For example:
            :rubysyntax
              i18n.file.add             #=> "Add file"
              i18n.file.delete('Test')  #=> "Delete file Test"
              i18n.files(1)             #=> "One file"
              i18n.files(12)            #=> "12 files"
              i18n.author('user')       #=> "This file was created by User"

              i18n.l -12000.5           #=> "−12,000.5"

              i18n.l Time.now           #=> "08/09/2009 21:41"
              i18n.l Time.now, :human   #=> "now"

              # Base translation
              i18n.ok                   #=> "OK"
              i18n.cancel               #=> "Cancel"
      %h2 Sources
      %p It is a <a href="http://en.wikipedia.org/wiki/Free_software">free software</a> and you can get and edit sources:
      %p View <a href="http://github.com/ai/r18n">online</a> on GitHub or clone <a href="http://en.wikipedia.org/wiki/Git_(software)">Git</a> repository:
      %pre
        git clone git://github.com/ai/r18n.git
